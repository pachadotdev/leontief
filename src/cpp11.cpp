// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// leontief-matrices.cpp
doubles_matrix<> input_requirement_(const doubles_matrix<> & Xr, const doubles& dr);
extern "C" SEXP _leontief_input_requirement_(SEXP Xr, SEXP dr) {
  BEGIN_CPP11
    return cpp11::as_sexp(input_requirement_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Xr), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(dr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> augmented_input_requirement_(const doubles_matrix<> & Xr, const doubles& wr, const doubles& cr, const doubles& dr);
extern "C" SEXP _leontief_augmented_input_requirement_(SEXP Xr, SEXP wr, SEXP cr, SEXP dr) {
  BEGIN_CPP11
    return cpp11::as_sexp(augmented_input_requirement_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Xr), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(wr), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(cr), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(dr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> output_allocation_(const doubles_matrix<> & Xr, const doubles& dr);
extern "C" SEXP _leontief_output_allocation_(SEXP Xr, SEXP dr) {
  BEGIN_CPP11
    return cpp11::as_sexp(output_allocation_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Xr), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(dr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> leontief_inverse_(const doubles_matrix<> & Ar);
extern "C" SEXP _leontief_leontief_inverse_(SEXP Ar) {
  BEGIN_CPP11
    return cpp11::as_sexp(leontief_inverse_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Ar)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> equilibrium_output_(const doubles_matrix<> & Lr, const doubles& dr);
extern "C" SEXP _leontief_equilibrium_output_(SEXP Lr, SEXP dr) {
  BEGIN_CPP11
    return cpp11::as_sexp(equilibrium_output_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Lr), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(dr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> output_multiplier_(const doubles_matrix<> & Lr);
extern "C" SEXP _leontief_output_multiplier_(SEXP Lr) {
  BEGIN_CPP11
    return cpp11::as_sexp(output_multiplier_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Lr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> income_multiplier_(const doubles_matrix<> & Lr, const doubles& wr);
extern "C" SEXP _leontief_income_multiplier_(SEXP Lr, SEXP wr) {
  BEGIN_CPP11
    return cpp11::as_sexp(income_multiplier_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Lr), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(wr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> employment_multiplier_(const doubles_matrix<> & Lr, const doubles& er);
extern "C" SEXP _leontief_employment_multiplier_(SEXP Lr, SEXP er) {
  BEGIN_CPP11
    return cpp11::as_sexp(employment_multiplier_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Lr), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(er)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> employment_number_(const doubles_matrix<> & Lr, const doubles& er, const doubles& cr);
extern "C" SEXP _leontief_employment_number_(SEXP Lr, SEXP er, SEXP cr) {
  BEGIN_CPP11
    return cpp11::as_sexp(employment_number_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Lr), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(er), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(cr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> backward_linkage_(const doubles_matrix<> & Ar);
extern "C" SEXP _leontief_backward_linkage_(SEXP Ar) {
  BEGIN_CPP11
    return cpp11::as_sexp(backward_linkage_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Ar)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> forward_linkage_(const doubles_matrix<> & Ar);
extern "C" SEXP _leontief_forward_linkage_(SEXP Ar) {
  BEGIN_CPP11
    return cpp11::as_sexp(forward_linkage_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Ar)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> power_dispersion_(const doubles_matrix<> & Lr);
extern "C" SEXP _leontief_power_dispersion_(SEXP Lr) {
  BEGIN_CPP11
    return cpp11::as_sexp(power_dispersion_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Lr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> power_dispersion_cv_(const doubles_matrix<> & Lr);
extern "C" SEXP _leontief_power_dispersion_cv_(SEXP Lr) {
  BEGIN_CPP11
    return cpp11::as_sexp(power_dispersion_cv_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Lr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> sensitivity_dispersion_(const doubles_matrix<> & Lr);
extern "C" SEXP _leontief_sensitivity_dispersion_(SEXP Lr) {
  BEGIN_CPP11
    return cpp11::as_sexp(sensitivity_dispersion_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Lr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> sensitivity_dispersion_cv_(const doubles_matrix<> & Lr);
extern "C" SEXP _leontief_sensitivity_dispersion_cv_(SEXP Lr) {
  BEGIN_CPP11
    return cpp11::as_sexp(sensitivity_dispersion_cv_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Lr)));
  END_CPP11
}
// leontief-matrices.cpp
doubles_matrix<> multiplier_product_matrix_(const doubles_matrix<> & Lr);
extern "C" SEXP _leontief_multiplier_product_matrix_(SEXP Lr) {
  BEGIN_CPP11
    return cpp11::as_sexp(multiplier_product_matrix_(cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<> &>>(Lr)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_leontief_augmented_input_requirement_", (DL_FUNC) &_leontief_augmented_input_requirement_, 4},
    {"_leontief_backward_linkage_",            (DL_FUNC) &_leontief_backward_linkage_,            1},
    {"_leontief_employment_multiplier_",       (DL_FUNC) &_leontief_employment_multiplier_,       2},
    {"_leontief_employment_number_",           (DL_FUNC) &_leontief_employment_number_,           3},
    {"_leontief_equilibrium_output_",          (DL_FUNC) &_leontief_equilibrium_output_,          2},
    {"_leontief_forward_linkage_",             (DL_FUNC) &_leontief_forward_linkage_,             1},
    {"_leontief_income_multiplier_",           (DL_FUNC) &_leontief_income_multiplier_,           2},
    {"_leontief_input_requirement_",           (DL_FUNC) &_leontief_input_requirement_,           2},
    {"_leontief_leontief_inverse_",            (DL_FUNC) &_leontief_leontief_inverse_,            1},
    {"_leontief_multiplier_product_matrix_",   (DL_FUNC) &_leontief_multiplier_product_matrix_,   1},
    {"_leontief_output_allocation_",           (DL_FUNC) &_leontief_output_allocation_,           2},
    {"_leontief_output_multiplier_",           (DL_FUNC) &_leontief_output_multiplier_,           1},
    {"_leontief_power_dispersion_",            (DL_FUNC) &_leontief_power_dispersion_,            1},
    {"_leontief_power_dispersion_cv_",         (DL_FUNC) &_leontief_power_dispersion_cv_,         1},
    {"_leontief_sensitivity_dispersion_",      (DL_FUNC) &_leontief_sensitivity_dispersion_,      1},
    {"_leontief_sensitivity_dispersion_cv_",   (DL_FUNC) &_leontief_sensitivity_dispersion_cv_,   1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_leontief(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
